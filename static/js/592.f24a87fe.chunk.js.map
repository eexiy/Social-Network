{"version":3,"file":"static/js/592.f24a87fe.chunk.js","mappings":"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","sources":["components/Profile/MyPosts/AddPostForm.jsx","webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","webpack://my-app/./src/components/Profile/Profile.module.css?b512","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/Contact.jsx","components/Profile/ProfileInfo/ProfileData.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"sourcesContent":["import { Field, Form, Formik } from \"formik\";\r\n\r\nconst AddPostForm = (props) => {\r\n\r\n    let addNewPost = (values) => {\r\n        props.sendPost(values);\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                newPostText: \"\"\r\n            }}\r\n            onSubmit={(values, { resetForm }) => {\r\n                console.log(values.newPostText);\r\n                addNewPost(values.newPostText);\r\n                resetForm({ values: '' });\r\n            }\r\n            }\r\n        >\r\n            {() => (\r\n                <Form>\r\n                    <div>\r\n                        <Field\r\n                            name={'newPostText'}\r\n                            as={'textarea'}\r\n                            placeholder={'enter text'}\r\n                        />\r\n                    </div>\r\n\r\n                    <button type={'submit'}>Send</button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\nexport default AddPostForm","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MyPosts_content__9IAt7\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__QLrUw\"};","import s from './Post.module.css'\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://www.kibrispdr.org/data/999/avatar-logo-template-1.jpg\" alt=\"\" />\r\n            {props.message}\r\n            <div>\r\n                <span>Like</span> {props.likes}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport AddPostForm from './AddPostForm';\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\n\r\n\r\n\r\nconst MyPosts = React.memo(props => {\r\n\r\n    const postsElement = props.postsData.map(post => <Post message={post.post} key={post.id} likes={post.likes} />)\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <div>\r\n                <h3>My Posts</h3>\r\n                <div>\r\n                    <AddPostForm sendPost={props.sendPost} />\r\n                </div>\r\n                <div className={s.posts}>\r\n                    {postsElement}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default MyPosts;","import { connect } from 'react-redux';\r\nimport { addPostActionCreator } from '../../../redux/profileReducer';\r\nimport MyPosts from './MyPosts';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        postsData: state.profilePage.postsData,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Profile_content__DGrjF\"};","// extracted by mini-css-extract-plugin\nexport default {\"profile__header\":\"ProfileInfo_profile__header__-gzEh\",\"profile__info\":\"ProfileInfo_profile__info__E9SNE\",\"profile__infoAva\":\"ProfileInfo_profile__infoAva__kHeqU\",\"profile__infoContact\":\"ProfileInfo_profile__infoContact__O9coq\",\"profile__contact\":\"ProfileInfo_profile__contact__9goMH\"};","//\r\nimport React, {useEffect, useState} from \"react\";\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n   let [editMode, setEditMode] = useState( false );\r\n   let [status, setStatus] = useState( props.status );\r\n\r\n   useEffect( () => {\r\n      setStatus( props.status )\r\n   }, [props.status] )\r\n\r\n\r\n   const activateEditMode = () => {\r\n      setEditMode( true );\r\n   }\r\n\r\n   const deActivateEditMode = () => {\r\n      setEditMode( false );\r\n      props.updateStatus( status );\r\n   }\r\n\r\n   const onStatusChange = (e) => {\r\n      setStatus( e.currentTarget.value )\r\n   }\r\n\r\n   return (\r\n      <div>\r\n\r\n         {!editMode &&\r\n         <div>\r\n            Status: <span onDoubleClick={activateEditMode}>\r\n               {props.status}\r\n            </span>\r\n         </div>\r\n         }\r\n\r\n         {editMode &&\r\n         <div>\r\n            <input\r\n               autoFocus={true}\r\n               onBlur={deActivateEditMode}\r\n               onChange={onStatusChange}\r\n               value={status}\r\n            />\r\n         </div>\r\n         }\r\n\r\n      </div>\r\n   );\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;\r\n\r\n","import s from './ProfileInfo.module.css'\r\n\r\nconst Contact = ({ contactTitle, contactValue }) => {\r\n    return (\r\n        <div className={s.profile__contact} >\r\n            <ul>\r\n                <li>{contactTitle}: <span>{contactValue}</span></li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact","import Contact from './Contact'\r\nimport s from './ProfileInfo.module.css'\r\n\r\nconst ProfileData = (props) => {\r\n    return (\r\n        <div className={s.profile__info}>\r\n            {props.isOwner && <button onClick={props.activateEditMode}>Edit</button>}\r\n            <ul>\r\n                <li>Full name: <span>{props.profile.fullName}</span></li>\r\n                <li>Looking for a job: <span>{props.profile.lookingForAJob ? 'Yes' : 'No'}</span></li>\r\n                <li>\r\n                    Looking for a job description: <span>{props.profile.lookingForAJobDescription}</span>\r\n                </li>\r\n                <li>About Me: {props.profile.aboutMe}</li>\r\n            </ul>\r\n            <div>\r\n                Contacts: {\r\n                    Object.keys(props.profile.contacts).map(key => {\r\n                        return <Contact key={key} contactTitle={key} contactValue={props.profile.contacts[key]} />\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileData","import { ErrorMessage, Field, Form, Formik } from 'formik'\r\nimport s from './ProfileInfo.module.css'\r\n\r\n\r\n\r\n\r\nconst ProfileDataForm = (props) => {\r\n\r\n    const { fullName = '', lookingForAJob = false, lookingForAJobDescription = '', aboutMe = '',\r\n        contacts = {\r\n            facebook: null,\r\n            instagram: null,\r\n            twitter: null,\r\n            vk: null,\r\n            website: null,\r\n            youtube: null,\r\n            github: null,\r\n            mainLink: null,\r\n        } } = props.initialValues\r\n\r\n    return (\r\n        <Formik enableReinitialize={true}\r\n            initialValues={{ fullName, lookingForAJob, lookingForAJobDescription, aboutMe, contacts }}\r\n            onSubmit={(values) => {\r\n                props.saveProfileInfo(values)\r\n                props.setEditMode(false)\r\n            }}\r\n        >\r\n            {() => (\r\n                <Form>\r\n                    <button type='submit'>Save</button>\r\n                    <div>\r\n                        <Field\r\n                            name={'fullName'}\r\n                            type={'text'}\r\n                            placeholder={'Full name'}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <Field\r\n                            name={'lookingForAJob'}\r\n                            type={'checkbox'}\r\n                            id='lookingForAJob' />\r\n                        <label htmlFor={'lookingForAJob'}>\r\n                            <b> Looking for a job</b> </label>\r\n                    </div>\r\n                    <div>\r\n                        <Field\r\n                            name={'lookingForAJobDescription'}\r\n                            as={'textarea'}\r\n                            placeholder={'My professional skills'}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <Field\r\n                            name={'aboutMe'}\r\n                            as={'textarea'}\r\n                            placeholder={'About me'}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        Contacts: {\r\n                            Object.keys(props.profile.contacts).map(key => {\r\n                                return <div key={key} className={s.contacts}>\r\n                                    <div>{key}</div>\r\n                                    <Field\r\n                                        name={`contacts.${key}`}\r\n                                        placeholder={key}\r\n                                    />\r\n                                    <ErrorMessage name={`contacts.${key}`} component=\"div\" />\r\n                                </div>\r\n                            })\r\n                        }\r\n                    </div>\r\n                </Form>\r\n            )}\r\n        </Formik >\r\n    )\r\n}\r\n\r\nexport default ProfileDataForm","import Preloader from '../../../common/Preloader/Preloader'\r\nimport s from './ProfileInfo.module.css'\r\nimport ProfileStatus from './ProfileStatus'\r\nimport userPhoto from '../../../assets/images/ava.webp'\r\nimport ProfileData from './ProfileData'\r\nimport { useState } from 'react'\r\nimport ProfileDataForm from './ProfileDataForm'\r\n\r\nconst ProfileInfo = (props) => {\r\n\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onMainPhotoSelected = (event) => {\r\n        if (event.target.files.length) {\r\n            props.savePhoto(event.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.profile__header}>\r\n                <img src=\"https://i.pinimg.com/originals/76/e9/23/76e9238fca30a0fc41b6f5fac75b516b.jpg\" alt=\"\" />\r\n            </div>\r\n            <div >\r\n                <img className={s.profile__infoAva} src={props.profile.photos.large || userPhoto} alt=\"\" />\r\n                <div className={s.profile__infoInput}></div>\r\n                {props.isOwner && <input type=\"file\" onChange={onMainPhotoSelected} />}\r\n                {editMode\r\n                    ? <ProfileDataForm\r\n                        setEditMode={setEditMode}\r\n                        saveProfileInfo={props.saveProfileInfo}\r\n                        initialValues={props.profile}\r\n                        profile={props.profile}\r\n                    />\r\n                    : <ProfileData\r\n                        activateEditMode={() => setEditMode(true)}\r\n                        isOwner={props.isOwner}\r\n                        profile={props.profile}\r\n                    />}\r\n                <ProfileStatus\r\n                    status={props.status}\r\n                    profile={props.profile}\r\n                    updateStatus={props.updateStatus}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileInfo","import MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport s from './Profile.module.css'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo profile={props.profile}\r\n                status={props.status}\r\n                isOwner={props.isOwner}\r\n                updateStatus={props.updateStatus}\r\n                saveProfileInfo={props.saveProfileInfo} />\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport { getUserProfile, getStatus, savePhoto, updateStatus, saveProfileInfo } from '../../redux/profileReducer'\r\nimport { useLocation, useNavigate, useParams } from 'react-router-dom'\r\nimport { compose } from 'redux';\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isShowMyProfile: true\r\n        }\r\n    }\r\n\r\n    // refreshProfile = () => {\r\n    //     let userId = this.props.match.params.userId\r\n    //     if (!userId) {\r\n    //         this.props.match.params.userId = 6724\r\n    //     }\r\n    //     this.props.getUserProfile(userId)\r\n    //     console.log(this.props.getUserProfile(userId))\r\n    //     this.props.getStatus(userId)\r\n    // }\r\n\r\n    // componentDidMount() {\r\n    //     this.refreshProfile()\r\n    // }\r\n\r\n    componentDidMount() {\r\n\r\n        let userIdFromPath = +this.props.router.params.userId;\r\n        let authorizedUserId = this.props.authorizedUserId;\r\n\r\n        if (userIdFromPath) {\r\n            this.props.getUserProfile(userIdFromPath);\r\n            this.props.getStatus(userIdFromPath);\r\n\r\n        } else {\r\n\r\n            if (this.props.isAuth) {\r\n                this.props.getUserProfile(authorizedUserId);\r\n                this.props.getStatus(authorizedUserId);\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n        let userIdFromPath = +this.props.router.params.userId;\r\n        let authorizedUserId = this.props.authorizedUserId;\r\n        let isShowMyProfile = this.state.isShowMyProfile;\r\n\r\n        if (isShowMyProfile) {\r\n\r\n            if (userIdFromPath === authorizedUserId) {\r\n                this.setState({ isShowMyProfile: false })\r\n            }\r\n\r\n            if (!userIdFromPath && this.props.isAuth) {\r\n                this.props.getUserProfile(authorizedUserId);\r\n                this.props.getStatus(authorizedUserId);\r\n                this.setState({ isShowMyProfile: false })\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        if (!this.props.isAuth && !this.props.router.params.userId) {\r\n            return <Navigate to={'/login'} />\r\n        }\r\n\r\n        let userIdFromPath = +this.props.router.params.userId;\r\n        let authorizedUserId = this.props.authorizedUserId;\r\n\r\n        let isOwner = false;\r\n        if (!userIdFromPath && this.props.isAuth) {\r\n            isOwner = true;\r\n        } else if (userIdFromPath === authorizedUserId) {\r\n            isOwner = true;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                    isOwner={isOwner}\r\n                    savePhoto={this.props.savePhoto}\r\n                    saveProfileInfo={this.props.saveProfileInfo}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nfunction withRouter(Component) {\r\n\r\n    function ComponentWithRouterProp(props) {\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams();\r\n\r\n        return <Component\r\n            {...props}\r\n            router={{ location, navigate, params }} />;\r\n    }\r\n    return ComponentWithRouterProp;\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nconst ProfileContainerCompose = compose(\r\n    withRouter,\r\n    connect(mapStateToProps,\r\n        { getUserProfile, getStatus, updateStatus, savePhoto, saveProfileInfo })\r\n)(ProfileContainer)\r\n\r\nexport default ProfileContainerCompose;"],"names":["props","initialValues","newPostText","onSubmit","values","resetForm","console","log","sendPost","addNewPost","name","as","placeholder","type","className","s","src","alt","message","likes","React","postsElement","postsData","map","post","id","connect","state","profilePage","dispatch","addPostActionCreator","MyPosts","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","contactTitle","contactValue","isOwner","onClick","activateEditMode","profile","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","key","facebook","instagram","twitter","vk","website","youtube","github","mainLink","enableReinitialize","saveProfileInfo","htmlFor","component","Preloader","photos","large","userPhoto","event","target","files","length","savePhoto","ProfileStatus","ProfileContainer","isShowMyProfile","userIdFromPath","this","router","params","userId","authorizedUserId","getUserProfile","getStatus","isAuth","prevProps","prevState","snapshot","setState","to","compose","Component","location","useLocation","navigate","useNavigate","useParams","auth"],"sourceRoot":""}