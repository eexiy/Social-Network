{"version":3,"file":"static/js/285.8d247602.chunk.js","mappings":"6LAEaA,EAAc,SAACC,EAAeC,EAAMC,EAAMC,EAAaC,GAAzC,OACvB,iCACI,SAAC,KAAD,CAAOC,SAAUL,EAAeC,KAAMA,EAAMC,KAAMA,EAAMC,YAAaA,IADzE,IAC0FC,IAFnE,E,mBCY3B,EAXwBE,EAAAA,KAAaC,MAAM,CACvCC,MAAOF,EAAAA,KAEFG,IAAI,EAAG,oCAEPC,IAAI,GAAI,+CACRC,UAAS,SAAC,MAAD,KACdC,SAAUN,EAAAA,KACLG,IAAI,EAAG,oCACPE,UAAS,SAAC,MAAD,OCXlB,EAAwB,qBAAxB,EAA0D,0BAA1D,EAAgG,yBAAhG,EAAyI,6BAAzI,EAAiL,wBAAjL,EAAoN,wBCI9MX,EAAgB,SAACa,GACnB,IAAIC,EAMJ,OALKD,EAEO,4CAA4CE,KAAKF,KACzDC,EAAQ,yBAFRA,EAAQ,WAILA,CACV,EAyCD,EAvCkB,SAACE,GACf,OACI,0BACI,SAAC,KAAD,CACIC,cAAe,CAAET,MAAO,GAAII,SAAU,GAAIM,YAAY,GACtDC,iBAAkBC,EAClBC,SAAU,SAACC,EAAQC,GACfP,EAAMQ,MAAMF,EAAOd,MAAOc,EAAOV,SAAUU,EAAOJ,WACrD,EALL,SAMK,kBACG,SAAC,KAAD,WACI,iBAAKO,UAAWC,EAAhB,WACI,iBAAKD,UAAWC,EAAhB,UACK3B,EAAYC,EAAe,OAAQ,QAAS,OAC7C,qBACA,sCACA,gBAAKyB,UAAWC,EAAhB,UACI,SAAC,KAAD,CAAcxB,KAAK,QAAQyB,UAAU,cAG7C,iBAAKF,UAAWC,EAAhB,UACK3B,EAAY,KAAM,WAAY,WAAY,OAC3C,qBACA,yCACA,gBAAK0B,UAAWC,EAAhB,UACI,SAAC,KAAD,CAAcxB,KAAK,WAAWyB,UAAU,cAGhD,mBAAQF,UAAWC,EAAYzB,KAAK,SAApC,wBAnBX,KA0BhB,E,oBC1BD,GAAe2B,EAAAA,EAAAA,KANO,SAACC,GACnB,MAAO,CACHC,OAAQD,EAAME,KAAKD,OAE1B,GAEuC,CAAEN,MAAAA,EAAAA,IAA1C,EAhBc,SAACR,GACX,OAAGA,EAAMc,QAAgB,SAAC,KAAD,CAAUE,GAAG,mBAElC,iBAAKP,UAAWC,EAAhB,WACI,eAAID,UAAWC,EAAf,oBACA,SAAC,EAAD,CAAWF,MAAOR,EAAMQ,UAGnC,G","sources":["common/Preloader/FormValidation/FormControls.js","common/Preloader/FormValidation/LoginFormSchema.js","webpack://my-app/./src/components/Login/Login.module.css?3530","components/Login/LoginForm.jsx","components/Login/Login.jsx"],"sourcesContent":["import { Field } from \"formik\";\r\n\r\nexport const createField = (validateEmail, type, name, placeholder, text,) => (\r\n    <>\r\n        <Field validate={validateEmail} type={type} name={name} placeholder={placeholder} /> {text}\r\n    </>\r\n)","import * as Yup from \"yup\";\r\nimport { AiOutlineExclamationCircle } from 'react-icons/ai'\r\n\r\nconst loginFormSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        //минимальная длина - 2 символа\r\n        .min(2, \"Must be longer than 2 characters\")\r\n        //максимальная длина - 30 символов\r\n        .max(30, \"Nice try, nobody has a first name that long\")\r\n        .required(<AiOutlineExclamationCircle />),\r\n    password: Yup.string()\r\n        .min(8, \"Must be longer than 8 characters\")\r\n        .required(<AiOutlineExclamationCircle />)\r\n});\r\nexport default loginFormSchema;","// extracted by mini-css-extract-plugin\nexport default {\"login\":\"Login_login__d5Aqo\",\"loginTitle\":\"Login_loginTitle__YctBY\",\"loginForm\":\"Login_loginForm__fqDJi\",\"loginTxtField\":\"Login_loginTxtField__2m94+\",\"loginBtn\":\"Login_loginBtn__IlPuy\",\"loginErr\":\"Login_loginErr__-xS3K\"};","import { ErrorMessage, Form, Formik } from \"formik\"\r\nimport { createField } from \"../../common/Preloader/FormValidation/FormControls\";\r\nimport loginFormSchema from \"../../common/Preloader/FormValidation/LoginFormSchema\"\r\nimport s from './Login.module.css'\r\n\r\nconst validateEmail = (value) => {\r\n    let error;\r\n    if (!value) {\r\n        error = 'Required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\r\n        error = 'Invalid email address';\r\n    }\r\n    return error;\r\n}\r\n\r\nconst LoginForm = (props) => {\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{ email: \"\", password: \"\", rememberMe: false }}\r\n                validationSchema={loginFormSchema}\r\n                onSubmit={(values, setFieldValue) => {\r\n                    props.login(values.email, values.password, values.rememberMe)\r\n                }}>\r\n                {() => (\r\n                    <Form>\r\n                        <div className={s.loginForm}>\r\n                            <div className={s.loginTxtField}>\r\n                                {createField(validateEmail, 'text', 'email', null)}\r\n                                <span></span>\r\n                                <label>Email</label>\r\n                                <div className={s.loginErr}>\r\n                                    <ErrorMessage name=\"email\" component=\"div\" />\r\n                                </div>\r\n                            </div>\r\n                            <div className={s.loginTxtField}>\r\n                                {createField(null, 'password', 'password', null)}\r\n                                <span></span>\r\n                                <label>Password</label>\r\n                                <div className={s.loginErr}>\r\n                                    <ErrorMessage name=\"password\" component=\"div\" />\r\n                                </div>\r\n                            </div>\r\n                            <button className={s.loginBtn} type='submit'>Log in</button>\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default LoginForm","import { connect } from 'react-redux';\r\nimport React from \"react\";\r\nimport LoginForm from \"./LoginForm\";\r\nimport { login } from '../../redux/authReducer';\r\nimport { Navigate } from 'react-router-dom';\r\nimport s from './Login.module.css' \r\n\r\n\r\nconst Login = (props) => {\r\n    if(props.isAuth) return  <Navigate to='/profile/6724' />\r\n    return (\r\n        <div className={s.login}>\r\n            <h1 className={s.loginTitle}>Login</h1>\r\n            <LoginForm login={props.login} />\r\n        </div>\r\n    )\r\n};\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { login })(Login)\r\n"],"names":["createField","validateEmail","type","name","placeholder","text","validate","Yup","shape","email","min","max","required","password","value","error","test","props","initialValues","rememberMe","validationSchema","loginFormSchema","onSubmit","values","setFieldValue","login","className","s","component","connect","state","isAuth","auth","to"],"sourceRoot":""}