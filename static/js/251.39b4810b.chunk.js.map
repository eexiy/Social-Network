{"version":3,"file":"static/js/251.39b4810b.chunk.js","mappings":"6LAEaA,EAAc,SAACC,EAAeC,EAAMC,EAAMC,EAAaC,GAAzC,OACvB,4BACI,SAAC,KAAD,CAAOC,SAAUL,EAAeC,KAAMA,EAAMC,KAAMA,EAAMC,YAAaA,IADzE,IAC0FC,IAFnE,E,SCW3B,EAXwBE,EAAAA,KAAaC,MAAM,CACvCC,MAAOF,EAAAA,KAEFG,IAAI,EAAG,oCAEPC,IAAI,GAAI,+CACRC,SAAS,YACdC,SAAUN,EAAAA,KACLG,IAAI,EAAG,oCACPE,SAAS,cCPZX,EAAgB,SAACa,GACnB,IAAIC,EAMJ,OALKD,EAEO,4CAA4CE,KAAKF,KACzDC,EAAQ,yBAFRA,EAAQ,WAILA,CACV,EA4BD,EA1BkB,SAACE,GACf,OACI,0BACI,SAAC,KAAD,CACIC,cAAe,CAAET,MAAO,GAAII,SAAU,GAAIM,YAAY,GACtDC,iBAAkBC,EAClBC,SAAU,SAACC,EAAQC,GACfP,EAAMQ,MAAMF,EAAOd,MAAOc,EAAOV,SAAUU,EAAOJ,WACrD,EALL,SAMK,kBACG,UAAC,KAAD,WACKnB,EAAYC,EAAe,OAAQ,QAAS,WAC7C,SAAC,KAAD,CAAcE,KAAK,QAAQuB,UAAU,QACpC1B,EAAY,KAAM,WAAY,WAAY,aAC3C,SAAC,KAAD,CAAcG,KAAK,WAAWuB,UAAU,QACvC1B,EAAY,KAAM,WAAY,aAAc,KAAM,gBACnD,mBAAQE,KAAK,SAAb,sBAPP,KAahB,E,oBCZD,GAAeyB,EAAAA,EAAAA,KANO,SAACC,GACnB,MAAO,CACHC,OAAQD,EAAME,KAAKD,OAE1B,GAEuC,CAAEJ,MAAAA,EAAAA,IAA1C,EAhBc,SAACR,GACX,OAAGA,EAAMY,QAAgB,SAAC,KAAD,CAAUE,GAAG,mBAElC,4BACI,mCACA,SAAC,EAAD,CAAWN,MAAOR,EAAMQ,UAGnC,G","sources":["common/Preloader/FormValidation/FormControls.js","common/Preloader/FormValidation/LoginFormSchema.js","components/Login/LoginForm.jsx","components/Login/Login.jsx"],"sourcesContent":["import { Field } from \"formik\";\r\n\r\nexport const createField = (validateEmail, type, name, placeholder, text,) => (\r\n    <div>\r\n        <Field validate={validateEmail} type={type} name={name} placeholder={placeholder} /> {text}\r\n    </div>\r\n)","import * as Yup from \"yup\";\r\n\r\nconst loginFormSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        //минимальная длина - 2 символа\r\n        .min(2, \"Must be longer than 2 characters\")\r\n        //максимальная длина - 30 символов\r\n        .max(30, \"Nice try, nobody has a first name that long\")\r\n        .required(\"Required\"),\r\n    password: Yup.string()\r\n        .min(8, \"Must be longer than 8 characters\")\r\n        .required(\"Required\")\r\n});\r\nexport default loginFormSchema;","import { ErrorMessage, Form, Formik } from \"formik\"\r\nimport { createField } from \"../../common/Preloader/FormValidation/FormControls\";\r\nimport loginFormSchema from \"../../common/Preloader/FormValidation/LoginFormSchema\"\r\n\r\nconst validateEmail = (value) => {\r\n    let error;\r\n    if (!value) {\r\n        error = 'Required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\r\n        error = 'Invalid email address';\r\n    }\r\n    return error;\r\n}\r\n\r\nconst LoginForm = (props) => {\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{ email: \"\", password: \"\", rememberMe: false }}\r\n                validationSchema={loginFormSchema}\r\n                onSubmit={(values, setFieldValue) => {\r\n                    props.login(values.email, values.password, values.rememberMe)\r\n                }}>\r\n                {() => (\r\n                    <Form>\r\n                        {createField(validateEmail, 'text', 'email', 'e-mail')}\r\n                        <ErrorMessage name=\"email\" component=\"div\" />\r\n                        {createField(null, 'password', 'password', 'password')}\r\n                        <ErrorMessage name=\"password\" component=\"div\" />\r\n                        {createField(null, 'checkbox', 'rememberMe', null, 'Remember me')}\r\n                        <button type='submit'>Log in</button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default LoginForm","import { connect } from 'react-redux';\r\nimport React from \"react\";\r\nimport LoginForm from \"./LoginForm\";\r\nimport { login } from '../../redux/authReducer';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\n\r\n\r\nconst Login = (props) => {\r\n    if(props.isAuth) return  <Navigate to='/profile/6724' />\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginForm login={props.login} />\r\n        </div>\r\n    )\r\n};\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { login })(Login)\r\n"],"names":["createField","validateEmail","type","name","placeholder","text","validate","Yup","shape","email","min","max","required","password","value","error","test","props","initialValues","rememberMe","validationSchema","loginFormSchema","onSubmit","values","setFieldValue","login","component","connect","state","isAuth","auth","to"],"sourceRoot":""}